import tkinter as tk
import customtkinter as ctk
from datetime import datetime
from database_window import DatabaseWindow
from assembly_window import AssemblyWindow
from completion_window import CompletionWindow
from orders_window import OrdersWindow
from repair_requests_window import RepairRequestWindow
from database_repair import DatabaseRepair
from edit_order_window import EditOrderWindow
from pdf_generator import generate_report
from contacts_window import ContactsWindow
from calendar_window import CalendarWindow
from statisctics_window import StatisticsWindow
from documentation_window import DocumentationWindow
import requests
from email_sender import EmailSender
import os
from dotenv import load_dotenv
import threading
from consumbles_window import ConsumblesWindow
from clients_window import ClientsWindow

class CustomWindow(ctk.CTk):
    def __init__(self):
        super().__init__()

        self.title("–ë–∞—Å —Å–∏—Å—Ç–µ–º–∞")
        self.geometry("800x600")
        self.resizable(False, False)
        self.update_weather_interval = 20000

        self.update_weather_info()
        load_dotenv()

        self.database_repair = DatabaseRepair()

        self.time_frame = ctk.CTkFrame(self)
        self.time_frame.pack(pady=10, fill='x')

        self.time_label = ctk.CTkLabel(self.time_frame, text="", font=("Arial", 12))
        self.time_label.pack(side='bottom')

        self.calendar_icon = ctk.CTkLabel(self.time_frame, text="üìÖ", font=("Arial", 25), cursor="hand2")
        self.calendar_icon.pack(side='bottom', padx=(10,0))

        self.calendar_icon.bind("<Enter>", self.show_task_info)
        self.calendar_icon.bind("<Enter>", self.hide_task_info)

        self.task_info_label = ctk.CTkLabel(self, width=250, height=150, corner_radius=10, fg_color="lightgray")
        self.task_info_label.place_forget()

        self.buttons_frame = ctk.CTkFrame(self)
        self.buttons_frame.pack(pady=10, fill="x")

        self.create_button("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", self.open_database_window).pack(side="left", padx=5)
        self.create_button("–°–±–æ—Ä–∫–∞", self.open_assembly_window).pack(side="left", padx=5)
        self.create_button("–î–æ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è", self.open_completion_window).pack(side="left", padx=5)
        self.create_button("–ó–∞–∫–∞–∑—ã", self.open_orders_window).pack(side="left", padx=5)
        self.create_button("–†–µ–º–æ–Ω—Ç", self.open_repair_window).pack(side="left", padx=5)

        self.repair_frame = ctk.CTkFrame(self)
        self.repair_frame.pack(pady=10, padx=10, fill="both", expand=True)

        self.repair_scrollable_frame = ctk.CTkScrollableFrame(self.repair_frame)
        self.repair_scrollable_frame.pack(pady=5, padx=5, fill="both", expand=True)

        self.update_time()

        self.load_repair_data()

        self.theme = "light"
        ctk.set_appearance_mode(self.theme)

        self.buttons_frame = ctk.CTkFrame(self)
        self.buttons_frame.pack(pady=10, fill="x")

        self.toggle_theme_button = ctk.CTkButton(self.buttons_frame, text="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É", command=self.toggle_theme)
        self.toggle_theme_button.pack(side="left", padx=5)

        self.contacts_button = ctk.CTkButton(self.buttons_frame, text="–ö–æ–Ω—Ç–∞–∫—Ç—ã", command=self.show_contacts)
        self.contacts_button.pack(side="left", padx=5)

        self.calendar_button = ctk.CTkButton(self.buttons_frame, text="–ö–∞–ª–µ–Ω–¥–∞—Ä—å", command=self.show_calendar)
        self.calendar_button.pack(side="left", padx=5)

        self.statistics_button = ctk.CTkButton(self.buttons_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", command=self.show_statistics)
        self.statistics_button.pack(side="left", padx=5)

        self.documentation_button = ctk.CTkButton(self.buttons_frame, text="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", command=self.show_documentation)
        self.documentation_button.pack(side="left", padx=5)

        self.mailing_button = ctk.CTkButton(self.buttons_frame, text="–†–∞—Å—Å—ã–ª–∫–∞", command=self.open_mailing_window)
        self.mailing_button.pack(side='left', padx=5)

        self.email_sender = EmailSender(
            smtp_server = os.getenv("SMTP_SERVER"),
            smtp_port = int(os.getenv("SMTP_PORT")),
            sender_email = os.getenv("SENDER_EMAIL"),
            sender_password = os.getenv("SENDER_PASSWORD")

        )

    def open_clients_window(self):
        clients_window = ClientsWindow(self)
        clients_window.mainloop()

    def open_mailing_window(self):
        subject = "–¢–µ–º–∞ –≤–∞—à–µ–≥–æ –ø–∏—Å—å–º–∞"   
        body = "–¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–∏—Å—å–º–∞"
        json_file_path = os.path.join("Users", "users.json")

        threading.Thread(target=self.send_emails_thread, args=(json_file_path, subject, body)).start()

    def send_emails_thread(self, json_file_path, body, subject):
        try:
            self.email_sender.send_bulk_emails(json_file_path, subject, body)
            self.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", "–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"))
        except Exception as e:
            self.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}"))

    def update_weather_info(self):
        try:
            response = requests.get("https://api.open-meteo.com/v1/forecast?latitude=55/7558&longitude=37.6173&current_weather=true")
            weather_data = response.json()
            
            temperature = weather_data['current_weather']['temperature']
            wind_speed = weather_data['current_weather']['wind_speed']

            self.title(f"–ë–∞—Å —Å–∏—Å—Ç–µ–º–∞ - –¢–µ–º–ø–µ—Ä–∞–ø—Ç—É—Ä–∞: {temperature}C, –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {e}")
            self.title("–ë–∞—Å —Å–∏—Å—Ç–µ–º–∞ - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
        
        self.after(self.update_weather_interval, self.update_weather_info)
    def show_task_info(self, event):
        current_date = datetime.now().strftime("%d.%m.%Y")    
        print(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á: {current_date}")

        tasks = self.database_repair.get_all_tasks()
        print(f"–í—Å–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {tasks}")

        tasks_today = [task for task in tasks if task['task_date'] == current_date]

        for widget in self.task_info_label.winfo_children():
            widget.destroy()

        self.task_info_label.configure(fg_color="transparent", width=350)
        self.task_info_label.place(x=290, y=100)
        self.task_info_label.pack_propagate(False)

        if tasks_today:
            for task in tasks_today:
                color = "green" if task['status'] == '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' else 'black'

                task_label = ctk.CTkLabel(self.task_info_label, text=f"{task['task_date']}", text_color=color)
                task_label.pack(anchor='w', padx=5, pady=2)

            self.task_info_label.lift()
        else:
            self.task_info_label.configure(text="–ù–µ—Ç –∑–∞–¥–∞—á")
            self.task_info_label.place(x=290, y=100)
            self.task_info_label.pack(fg_color="transparent")

        self.task_info_label.lift()

    def hide_task_info(self, event):
        self.task_info_label.place_forget()

    def create_button(self, text, command):
        """ Helper method to create buttons with common styling. """
        return ctk.CTkButton(self.buttons_frame, text=text, command=command)
    
    def update_time(self):
        now = datetime.now()
        formatted_time = now.strftime("–î–∞—Ç–∞: %d.%m.%Y –í—Ä–µ–º—è:%H:%M:%S")

        self.time_label.configure(text=formatted_time)

        self.after(1000, self.update_time)

    def open_database_window(self):
        database_window = DatabaseWindow()
        database_window.mainloop()

    def open_assembly_window(self):
        assembly_window = AssemblyWindow()
        assembly_window.mainloop()

    def open_completion_window(self):
        completion_window = CompletionWindow()
        completion_window.mainloop()

    def open_orders_window(self):
        orders_window = OrdersWindow()
        orders_window.mainloop()

    def open_repair_window(self):
        def on_repair_window_close():
            self.load_repair_data()

        repair_window = RepairRequestWindow(on_close_callback=on_repair_window_close)
        repair_window.mainloop()

    def load_repair_data(self):
        for widget in self.repair_scrollable_frame.winfo_children():
            widget.destroy()

        repair_orders = self.database_repair.get_all_repair_orders()

        for idx, order in enumerate(repair_orders, start=1):
            order_frame = ctk.CTkFrame(self.repair_scrollable_frame, border_width=0)
            order_frame.pack(fill="x", padx=10, pady=5)

            order_info = (
                f"–ó–∞—è–≤–∫–∞ ‚Ññ{idx}\n"
                f"–§–∞–º–∏–ª–∏—è ‚Ññ{order['surname']}\n"
                f"–ò–º—è ‚Ññ{order['first_name']}\n"
                f"–û—Ç—á–µ—Å—Ç–≤–æ ‚Ññ{order['patronymic']}\n"
                f"–ö–æ–º–ø–ª–µ–∫—Ç—Ü—é—â–∏–µ ‚Ññ{order['components']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ‚Ññ{order['problem_description']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω ‚Ññ{order['phone']}\n"
                f"Email ‚Ññ{order['email']}\n"
                f"–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Ññ{order['expected_completion_date']}\n"
                f"–°—Ç–∞—Ç—É—Å ‚Ññ{order['status']}\n"
            )

            info_label = ctk.CTkLabel(order_frame, text=order_info, anchor='w', justify='left')
            info_label.pack(side='left', fill='x', expand=True)

            button_frame = ctk.CTkFrame(order_frame)
            button_frame.pack(side="right")

            button_color = "#28a745" if order['status'] == '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' else "#007bff"
            button_text = "–í—ã–ø–æ–ª–Ω–µ–æ" if order['status'] == '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' else "–í—ã–ø–æ–ª–Ω–∏—Ç—å"
            execute_button = ctk.CTkButton(button_frame, text=button_text, command=lambda o=order: self.execute_order(o),
                                           fg_color=button_color, border_width=0)
            execute_button.pack(side='top', padx=5, pady=2)

            delete_button = ctk.CTkButton(button_frame, text="–£–¥–∞–ª–∏—Ç—å", command=lambda o=order: self.delete_order(o),
                                          fg_color="#dc3545", border_width=0)
            delete_button.pack(side='top', padx=5, pady=2)

            edit_button = ctk.CTkButton(button_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=lambda o=order: self.edit_order(o),
                                        fg_color="#ffc107", border_width=0)
            edit_button.pack(side='top', padx=5, pady=2)                           

            generate_button = ctk.CTkButton(button_frame, text="–§–æ—Ä–º–∏—Ä–æ–≤—Ç—å", command=lambda o=order: self.generate_report(o),
                                        fg_color="#007bff", border_width=0)             
            generate_button.pack(side='top', padx=5, pady=2)   
            
    def execute_order(self, order):
        self.database_repair.cursor.execute(
            "UPDATE repair_orders SET status = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' WHERE id = ?", (order['id'],)
        )
        self.database_repair.conn.commit()
        self.load_repair_data()

    def delete_order(self, order):
        self.database_repair.cursor.execute(
            "DELETE FROM repair_orders WHERE id = ?", (order['id'],)
        )
        self.database_repair.conn.commit()
        self.load_repair_data()

    def edit_order(self, order):
        edit_window = EditOrderWindow(order, self.database_repair, on_close_callback=self.load_repair_data)
        edit_window.mainloop()

    def generate_report(self, order):
        print(f"–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Ç—á–µ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ{order['id']}")

    def generate_report(self, order):
        pdf_filename = generate_report(order)
        print(f"–û—Ç—á–µ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ{order['id']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω {pdf_filename}")

    def toggle_theme(self):
        """ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ–º–Ω–æ–π –∏ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–∞–º–∏. """
        if self.theme == "light":
            self.theme = "dark"
        else:
            self.theme = "light"

        ctk.set_appearance_mode(self.theme)

    def show_contacts(self):
        """ –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ—é—Ä–∞–∂–µ–Ω–∏—è –æ–∫–Ω–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏. """
        ContactsWindow(self)

    def show_calendar(self):
        """ –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ—é—Ä–∞–∂–µ–Ω–∏—è –æ–∫–Ω–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º. """
        CalendarWindow(self)

    def show_statistics(self):
        stats_window = StatisticsWindow(self)
    
    def show_documentation(self):
        documentation_window = DocumentationWindow(self)

    def filter_orders(self):
        search_query = self.search_entry.get().strip()

        if search_query.startswitch("#"):
            search_query = search_query[1:].strip()

        for widget in self.repair_scrollable_frame.winfo_childen():
            widget.destroy()

        all_orders = self.database_repair.get_all_repair_orders()

        if not search_query:
            self.load_repair_data()
            return
        
        filtered_orders = [order for order in all_orders if
            search_query.lower() in order['surname'].lower() or
            search_query.lower() in order['first_name'].lower() or
            search_query.lower() in order['patronymic'].lower() or
            search_query == str(order['id']) or
            search_query in order['phone'] or
            search_query in order['expected_completion_date']
            ]

        if filtered_orders:
            for order in filtered_orders:
                order_frame = ctk.CTkFrame(self.repair_scrollable_frame, border_width=0)
                order_frame.pack(fill="x", padx=10, pady=5)

                order_info = (
                    f"–ó–∞—è–≤–∫–∞ ‚Ññ{order['id']}\n"
                    f"–§–∞–º–∏–ª–∏—è: {order['surname']}\n"
                    f"–ò–º—è: {order['first_name']}\n"
                    f"–û—Ç—á–µ—Å—Ç–≤–æ: {order['patronymic']}\n"
                    f"–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ: {order['components']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {order['problem_description']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
                    f"Email: {order['email']}\n"
                    f"–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {order['expected_completion_date']}\n"
                    f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
                )

                info_label = ctk.CTkLabel(order_frame, text=order_info, anchor='w', justify='left')
                info_label.pack(side='left', fill='x', expand=True)

                button_frame = ctk.CTkFrame(order_frame)
                button_frame.pack(side='right')

                button_color = "#28a745" if order['status'] == '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' else "#007bff"
                button_text = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ–µ" if order['status'] == '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' else "–í—ã–ø–æ–ª–Ω–∏—Ç—å"
                execute_button = ctk.CTkButton(button_frame, text=button_text, command=lambda o=order: self.execute_order(o),
                                               fg_color=button_color, border_width=0, width=120)
                execute_button.pack(side='top', padx=5, pady=2)

                delete_button = ctk.CTkButton(button_frame, text="–£–¥–∞–ª–∏—Ç—å", command=lambda o=order: self.execute_order(o),
                                               fg_color="#dc3545", border_width=0, width=120)
                delete_button.pack(side='top', padx=5, pady=2)

                edit_button = ctk.CTkButton(button_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=lambda o=order: self.execute_order(o),
                                               fg_color="#ffc107", border_width=0, width=120)
                edit_button.pack(side='top', padx=5, pady=2)

                generate_button = ctk.CTkButton(button_frame, text="–§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", command=lambda o=order: self.execute_order(o),
                                               fg_color="#907bff", border_width=0, width=120)
                generate_button.pack(side='top', padx=5, pady=2)
        else:

            no_results_label = ctk.CTkLabel(self.repair_scrollable_frame, text="–ù–µ—Ç –∑–∞—è–≤–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞.", anchor='w', justify='left')
            no_results_label.pack(pady=5,padx=10)
        





